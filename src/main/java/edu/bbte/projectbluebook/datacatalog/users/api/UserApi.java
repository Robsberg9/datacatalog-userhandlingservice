/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.bbte.projectbluebook.datacatalog.users.api;

import edu.bbte.projectbluebook.datacatalog.users.model.dto.UserCreationRequest;
import edu.bbte.projectbluebook.datacatalog.users.model.dto.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /users : Create a User
     * Create new user (registration).
     *
     * @param userCreationRequest User information for registration. (optional)
     * @return Created (status code 201)
     *         or Unprocessable entity. (status code 422)
     */
    @ApiOperation(value = "Create a User", nickname = "createUser", notes = "Create new user (registration).", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 422, message = "Unprocessable entity.") })
    @RequestMapping(value = "/users",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> createUser(@ApiParam(value = "User information for registration."  )  @Valid @RequestBody(required = false) Mono<UserCreationRequest> userCreationRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /users/{userId} : Delete a User
     * Delete a specific user
     *
     * @param userId Unique identifier for user (required)
     * @return User deleted (status code 204)
     */
    @ApiOperation(value = "Delete a User", nickname = "deleteUser", notes = "Delete a specific user", authorizations = {
        @Authorization(value = "JWT")
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User deleted") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    default Mono<ResponseEntity<Void>> deleteUser(@ApiParam(value = "Unique identifier for user",required=true) @PathVariable("userId") String userId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /users/show_many : Get Many Users by ID
     * Returns all of the users with the specified IDs.
     *
     * @param ids A comma separated list of ids to query. (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get Many Users by ID", nickname = "getManyUsersById", notes = "Returns all of the users with the specified IDs.", response = UserResponse.class, responseContainer = "List", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/users/show_many",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<UserResponse>>> getManyUsersById(@NotNull @ApiParam(value = "A comma separated list of ids to query.", required = true) @Valid @RequestParam(value = "ids", required = true) List<String> ids, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"firstName\" : \"Jane\", \"lastName\" : \"Doe\", \"role\" : \"user\", \"id\" : \"507f1f77bcf86cd799439011\", \"email\" : \"example@mail.com\", \"username\" : \"User1\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /users/{userId} : Get a User
     * Get user by ID
     *
     * @param userId Unique identifier for user (required)
     * @return OK (status code 200)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Get a User", nickname = "getUser", notes = "Get user by ID", response = UserResponse.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponse.class),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<UserResponse>> getUser(@ApiParam(value = "Unique identifier for user",required=true) @PathVariable("userId") String userId, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"firstName\" : \"Jane\", \"lastName\" : \"Doe\", \"role\" : \"user\", \"id\" : \"507f1f77bcf86cd799439011\", \"email\" : \"example@mail.com\", \"username\" : \"User1\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /users : Get all Users
     * Get all users.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get all Users", nickname = "getUsers", notes = "Get all users.", response = UserResponse.class, responseContainer = "List", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Flux<UserResponse>>> getUsers(ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"firstName\" : \"Jane\", \"lastName\" : \"Doe\", \"role\" : \"user\", \"id\" : \"507f1f77bcf86cd799439011\", \"email\" : \"example@mail.com\", \"username\" : \"User1\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
