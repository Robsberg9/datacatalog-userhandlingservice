/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package edu.bbte.projectbluebook.datacatalog.users.api;

import edu.bbte.projectbluebook.datacatalog.users.model.dto.TokenInfoRequest;
import edu.bbte.projectbluebook.datacatalog.users.model.dto.TokenInfoResponse;
import edu.bbte.projectbluebook.datacatalog.users.model.dto.UserLoginRequest;
import edu.bbte.projectbluebook.datacatalog.users.model.dto.UserLoginResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Authentication", description = "the Authentication API")
public interface AuthenticationApi {

    /**
     * POST /users/login : Log In
     * Log user into the system.
     *
     * @param userLoginRequest  (optional)
     * @return OK (status code 200)
     *         or Authentication failed. The username or password is not correct. (status code 401)
     */
    @ApiOperation(value = "Log In", nickname = "login", notes = "Log user into the system.", response = UserLoginResponse.class, tags={ "Authentication","User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserLoginResponse.class),
        @ApiResponse(code = 401, message = "Authentication failed. The username or password is not correct.") })
    @RequestMapping(value = "/users/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<UserLoginResponse>> login(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<UserLoginRequest> userLoginRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"user\" : { \"firstName\" : \"Jane\", \"lastName\" : \"Doe\", \"role\" : \"user\", \"id\" : \"507f1f77bcf86cd799439011\", \"email\" : \"example@mail.com\", \"username\" : \"User1\" }, \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODUxNDA5ODQsImlhdCI6MTQ4NTEzNzM4NCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyOWFjMGMxOC0wYjRhLTQyY2YtODJmYy0wM2Q1NzAzMThhMWQiLCJhcHBsaWNhdGlvbklkIjoiNzkxMDM3MzQtOTdhYi00ZDFhLWFmMzctZTAwNmQwNWQyOTUyIiwic\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /token_info : Token Introspection
     * It provides information about the token.
     *
     * @param tokenInfoRequest Contains the token. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Token Introspection", nickname = "tokenInfo", notes = "It provides information about the token.", response = TokenInfoResponse.class, tags={ "Authentication","User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TokenInfoResponse.class) })
    @RequestMapping(value = "/token_info",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<TokenInfoResponse>> tokenInfo(@ApiParam(value = "Contains the token."  )  @Valid @RequestBody(required = false) Mono<TokenInfoRequest> tokenInfoRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"role\" : \"USER\", \"active\" : true, \"exp\" : 1437275311, \"userId\" : \"userId\", \"iat\" : 1419350238, \"username\" : \"user1\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
